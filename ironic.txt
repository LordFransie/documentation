./commercial/GA1/commercial.faq.md:A seed VM is a bootable KVM VM image provided as part of HP Helion OpenStack and is deployed in a VM instance. This image contains the minimum services required of OpenStack to function and to be able to provision physical hardware to deploy the undercloud. The services are Nova, Neutron, Glance, Keystone, Ironic & Heat.
./commercial/GA1/commercial.faq.md:It contains a strictly limited sub-set of OpenStack, just enough to interact with the overcloud. The services running on the undercloud are Nova, Neutron, Glance, Keystone, Ironic, Heat, Horizon & Ceilometer. This server also contains HP Helion content distribution catalog  service, which provides a mechanism to download and install content and updates for the overcloud.
./commercial/GA1/commercial.faq.md:The overcloud is the functional cloud available to run guest virtual machines and workloads. It offers access to the Nova, Neutron, Glance, Keystone, Cinder, Swift, Ironic, Heat, Horizon, and Ceilometer services.  
./commercial/GA1/commercial.glossary.md:###Ironic###
./commercial/GA1/commercial.install-add-nodes.md:   This will register a new ironic node and create a new nova instance and a new heat stack.
./commercial/GA1/commercial.install-add-nodes.md:3. identify the ironic 'Node UUID'
./commercial/GA1/commercial.install-add-nodes.md:		ironic port-list --detail
./commercial/GA1/commercial.install-add-nodes.md:4. identify the nova instance 'Instance UUID' associated with the ironic Node UUID and, from that, identify the heat stack associated with the nova instance
./commercial/GA1/commercial.install-add-nodes.md:		ironic node-list
./commercial/GA1/commercial.install-add-nodes.md:		ironic node-delete <ironic_nodeid>
./commercial/GA1/commercial.install-GA-CSV.md:- power&#95;management maps to OpenStack Ironic power drivers as
./commercial/GA1/commercial.install-GA-overview.md:	<br><br>The undercloud comprises the Compute, Ironic, Networking Operations, Object Operations, Identity Operations, and Orchestration services, which are used to deploy and configure various nodes of the overcloud on baremetal servers.<br><br>The Centralized Logging and Monitoring components run in the undercloud and can be accessed using a Web Browser. <br><br>The Sherpa, Eon and Sirius services also run in the undercloud, and can be accessed via panels in the Horizon Dashboard from the undercloud.
./commercial/GA1/commercial.install-GA-virtual-control.md:		undercloud-controller-xyz# ironic node-create -d pxe_ipmitool -p cpus=X -p memory_mb=Y -p local_gb=Z -p cpu_arch=amd64 -i ipmi_address=x.y.z.a -i ipmi_username=admin -i ipmi_password=xyz
./commercial/GA1/commercial.install-GA-virtual-control.md:ComputeCapabilitiesFilter enabled us to overcome the above limitation. This is one of the approaches that we can follow. In this approach, we provide key:value pairs for every node.and register them in Ironic in the undercloud only. Likewise, the default flavor is update with the same key:value pair that is used for VMs and a different flavor is created for compute using the physical server key:value pair. The steps followed in this approach are:
./commercial/GA1/commercial.install-GA-virtual-control.md:5. Modify all existing VM nodes registered with ironic
./commercial/GA1/commercial.install-GA-virtual-control.md:		undercloud-controller-xyz# ironic node-update $NODE_ID add "properties/capabilities=hw_type:vm,node_type:any"
./commercial/GA1/commercial.install-GA-virtual-control.md:		undercloud-controller-xyz# ironic node-create -d pxe_ipmitool -p cpus=X -p memory_mb=Y -p local_gb=Z -p cpu_arch=amd64 -i ipmi_address=x.y.z.a -i ipmi_username=admin -i ipmi_password=xyz -p capabilities="hw_type:bm,node_type:compute"
./commercial/GA1/commercial.install-GA-vsa.md:2 - **Add VSA Baremetal nodes to ironic database**
./commercial/GA1/commercial.install-GA-vsa.md:   * Identify the hardware for StoreVirtual deployment and enroll the Baremetal to the ironic database.
./commercial/GA1/commercial.install-GA-vsa.md:   * Execute ironic CLI commands from the undercloud to enroll the Baremetal into ironic database.
./commercial/GA1/commercial.install-GA-vsa.md:* Before enrolling the new Baremetal server for StoreVirtual deployment, ensure that `#ironic node-list` in the undercloud server does not have any free nodes.This is required to register a new node which matches the disk requirements for StoreVirtual and is picked by the installer for StoreVirtual deployment.
./commercial/GA1/commercial.install-GA-vsa.md:	**Note:** Before enrolling the new Baremetal server for StoreVirtual deployment, ensure that `ironic node-list` in the undercloud server does not have any free nodes suitable for StoreVirtual installation. If a suitable node is available, skip the Baremetal registration steps and go to **step 5** below.
./commercial/GA1/commercial.install-GA-vsa.md:2. Register the new Baremetal server in the Ironic database. Replace the cpus, memory&#095;mb,local&#095;gb,ipmi&#095;address, ipmi&#095;password variable values with your Baremetal settings. 
./commercial/GA1/commercial.install-GA-vsa.md:		# ironic node-create -d pxe_ipmitool -p cpus=<value> -p memory_mb=<value> -p local_gb=<value> -p cpu_arch=<value> -i ipmi_address=<IP Address> -i ipmi_username=<username> -i ipmi_password=<password>
./commercial/GA1/commercial.install-GA-vsa.md:		# ironic node-create -d pxe_ipmitool -p cpus=12 -p memory_mb=98304 -p local_gb=1800 -p cpu_arch=amd64 -i ipmi_address=10.12.22.70 -i ipmi_username=admin -i ipmi_password=password
./commercial/GA1/commercial.install-GA-vsa.md:3. Create the ironic port for the ironic node that you created in the  previous step.
./commercial/GA1/commercial.install-GA-vsa.md:		# ironic port-create --address $MAC_ADDR --node_uuid $NODE_UUID
./commercial/GA1/commercial.install-GA-vsa.md:		# ironic node-list
./commercial/GA1/commercial.release-notes.11.md:**OpenStack Services** - The full set of standard [OpenStack services](/helion/openstack/services/overview/#OpenStack) is in HP Helion OpenStack: Nova (Compute), Swift (Object Operations), Cinder (Volume Operations), Neutron (Networking Operations), Glance (Image OPerations), Keystone (Identity Management), Horizon (Helion dashboard), Heat (Orchestration), TripleO, and Ironic.
./commercial/GA1/commercial.release-notes.GA.md:**OpenStack Juno Services** - The full set of standard OpenStack services is available for you to use: Nova, Swift, Cinder, Neutron, Glance, Keystone, Horizon, Heat, and TripleO (Ironic) for deployment.
./commercial/GA1/commercial.release-notes.GA.md:**TripleO (Ironic)** - Using OpenStack technology for deploying OpenStack services in a fully automated manner resulting in a baremetal control plane deployed in a highly available configuration.
./commercial/GA1/commercial.release-notes.md:**OpenStack Services** - The full set of standard [OpenStack services](/helion/openstack/services/overview/#OpenStack) is in HP Helion OpenStack: Nova (Compute), Swift (Object Operations), Cinder (Volume Operations), Neutron (Networking Operations), Glance (Image Operations), Keystone (Identity Management), Horizon (Helion dashboard), Heat (Orchestration), TripleO, and Ironic.
./commercial/GA1/commercial.site-index.md:- [Ironic Service Overview](/helion/openstack/services/ironic/overview/)
./commercial/GA1/commercial.technical-overview.ga.md:	The undercloud comprises the Compute, Ironic, Networking Operations, Object Operations, Identity Operations, and Orchestration services, which are used to deploy and configure various nodes of the overcloud on baremetal servers.<br><br>The Centralized Logging and Monitoring components run in the undercloud and can be accessed using a Web Browser. <br><br>The Sherpa, Eon and Sirius services also run in the undercloud, and can be accessed via panels in the Horizon Dashboard fr the undercloud.
./commercial/GA1/commercial.troubleshooting.controllers.md:2.  On the seed node, verify the logs in `/var/log/upstart`, especially those from heat, nova, and ironic.
./commercial/GA1/commercial.troubleshooting.swift.md:* [Ironic intermittently set maintenance mode to True during scale-out](#ironic)
./commercial/GA1/commercial.troubleshooting.swift.md:		# ironic node-list
./commercial/GA1/commercial.troubleshooting.swift.md:		# ironic node-delete <uuid>, where uuid is the ID of the node
./commercial/GA1/commercial.troubleshooting.swift.md:### Ironic intermittently set maintenance mode to True during scale-out {#ironic}
./commercial/GA1/commercial.troubleshooting.swift.md:3. Execute the `ironic node-list` command to determine which node(s) is in maintenance mode. The stack will have a maintenance of `TRUE`.
./commercial/GA1/commercial.troubleshooting.swift.md:		ironic node-list
./commercial/GA1/commercial.troubleshooting.swift.md:3. Execute the `ironic node-show` command for the node that is node(s) is in maintenance mode. The stack will have a maintenance of `TRUE`.
./commercial/GA1/commercial.troubleshooting.swift.md:		ironic node-show <UUID>
./commercial/GA1/commercial.troubleshooting.swift.md:		`ironic node-update <id> replace maintenance=False`
./commercial/GA1/commercial.troubleshooting.vsa.md:		# ironic nodelist
./commercial/GA1/commercial.troubleshooting.vsa.md:		# ironic nodedelete <uuid>
./commercial/GA1/commerical.flexible-control-pane-installation.md:3.	Register the new baremetal server in the Ironic database. Replace the CPU, memory, local disk size, IPMI address, and IPMI password values with your baremetal settings.
./commercial/GA1/commerical.flexible-control-pane-installation.md:		ironic node-create -d pxe_ipmitool -p cpus=<value> -p memory_mb=<value> -p local_gb=<value> -p cpu_arch=<value> -i ipmi_address=<IP Address> -i ipmi_username=<username> -i ipmi_password=<password> -p capabilities=hw_type:<bm_or_VM>,node_type:<node_type>
./commercial/GA1/commerical.flexible-control-pane-installation.md:		ironic node-create -d pxe_ipmitool -p cpus=12 -p memory_mb=98304 -p local_gb=1800 -p cpu_arch=amd64 -i ipmi_address=10.12.22.70 -i ipmi_username=admin -i ipmi_password=password capabilities=hw_type:bm,node_type:Compute
./commercial/GA1/commerical.flexible-control-pane-installation.md:4.	Create the Ironic port for the Ironic node created in the previous step.
./commercial/GA1/commerical.flexible-control-pane-installation.md:		ironic port-create --address $MAC_ADDR --node_uuid $NODE_UUID
./commercial/GA1/commerical.flexible-control-pane-installation.md:		ironic node-list
./commercial/GA1/commerical.flexible-control-pane-installation.md:- Undercloud Ironic service is unable to reach the KVM hosts
./commercial/GA1/commerical.flexible-control-pane-installation.md:- Undercloud Ironic service is unable to reach the IPMI network of the overcloud nodes
./commercial/GA1/commerical.services-ironic-overview.md:title: "HP Helion OpenStack&#174; Ironic Service Overview"
./commercial/GA1/commerical.services-ironic-overview.md:permalink: /helion/openstack/services/ironic/overview/
./commercial/GA1/commerical.services-ironic-overview.md:# HP Helion OpenStack&reg; Ironic Service Overview#
./commercial/GA1/commerical.services-ironic-overview.md:HP Helion OpenStack leverages the OpenStack Ironic service during the installation for provisioning of the controller and KVM compute host in a baremetal deployment.
./commercial/GA1/commerical.services-ironic-overview.md:Ironic is an OpenStack service to provision baremetal, not virtual, machines by leveraging common technologies such as PXE boot and IPMI to cover a wide range of hardware. Supporting pluggable drivers allows vendor-specific functionality to be added.
./commercial/GA1/commerical.services-ironic-overview.md:For information on Ironic, see OpenStack [Ironic's developer documentation](http://docs.openstack.org/developer/ironic/).
./commercial/GA1/commerical.services-overview.md:**Ironic**. The Ironic service runs during the installation for provisioning of the controller and KVM compute host in a baremetal deployment.
./commercial/GA1/commerical.services-overview.md:See [Overview of the Ironic Service](/helion/openstack/services/ironic/overview/).
./commercial/GA1/commerical.services-remove-replace-failed-overcloud-nodes.md:4. [Remove the failed nodes from ironic](#removeironic)
./commercial/GA1/commerical.services-remove-replace-failed-overcloud-nodes.md:		ironic_failed_node_id=$(ironic node-show --instance $failed_node_id | grep " uuid" | cut -f3 -d"|" | sed 's/\s//')
./commercial/GA1/commerical.services-remove-replace-failed-overcloud-nodes.md:### Remove the failed nodes from ironic {#removeironic}
./commercial/GA1/commerical.services-remove-replace-failed-overcloud-nodes.md:1. Execute the following command to remove the failed nodes from ironic.
./commercial/GA1/commerical.services-remove-replace-failed-overcloud-nodes.md:		# show the failed node in ironic (using the failed_node_id variable from above)
./commercial/GA1/commerical.services-remove-replace-failed-overcloud-nodes.md:		ironic node-show --instance $failed_node_id
./commercial/GA1/commerical.services-remove-replace-failed-overcloud-nodes.md:		# remove the failed node from ironic, using the uuid
./commercial/GA1/commerical.services-remove-replace-failed-overcloud-nodes.md:		ironic node-delete $ironic_failed_node_id
./commercial/GA1/commerical.services-remove-replace-failed-overcloud-nodes.md:2.  On the seed node, verify the logs in `/var/log/upstart`, especially those from heat, nova, and ironic.
./commercial/GA1/commerical.services-swift-deployment-provision-swift-node.md:6. Add the server details to the ironic database using the following ***ironic*** command:
./commercial/GA1/commerical.services-swift-deployment-provision-swift-node.md: 		# ironic node-create -d pxe_ipmitool -p cpus=<value> -p memory_mb=<value> -p local_gb=<value> -p cpu_arch=<value> -i ipmi_address=<IP address> -i ipmi_username=<admin user name> -i ipmi_password=<password> 
./commercial/GA1/commerical.services-swift-deployment-provision-swift-node.md:	The following sample displays the ironic database with the new server details:
./commercial/GA1/commerical.services-swift-deployment-provision-swift-node.md:7. Create the port, and enter the MAC address and node ID  using the following ironic command: 
./commercial/GA1/commerical.services-swift-deployment-provision-swift-node.md:		# ironic port-create -a $MAC -n $NODE_ID
./commercial/GA1/commerical.services-swift-deployment-provision-swift-node.md:		# ironic node-list
./community/community.3rd-party-licenses.old.md:* python-ironicclient
./community/community.faq.md:The undercloud is what you use as an administer to maintain the hardware.  It installs physical machines using nova and the baremetal or ironic driver (in the same way that it was installed from the seed). It then uses heat to deploy and configure the resulting booted systems, which is analogous to the use of Chef in HP Public Cloud.  The sole purpose of the undercloud is to administer the physical machines in the data center for the purpose of making them run an OpenStack cloud.
./community/community.install-overview.md:* Seed  - The seed VM is started as a VM from a specific seed VM image. It contains a number of self-contained OpenStack components that are used to deploy the undercloud. The seed deploys the undercloud by using the HP Ironic service to deploy a specific undercloud machine image.
./community/community.services-ironic-overview.md:title: "HP Helion OpenStack&#174; Ironic Service Overview"
./community/community.services-ironic-overview.md:permalink: /helion/community/services/ironic/overview/
./community/community.services-ironic-overview.md:# HP Helion OpenStack&reg; Community Ironic Service Overview#
./community/community.services-ironic-overview.md:HP Helion OpenStack Community leverages the OpenStack Ironic service during the installation for provisioning of the controller and KVM compute host in a baremetal deployment.
./community/community.services-ironic-overview.md:Ironic is an incubated OpenStack project to provision baremetal, not virtual, machines by leveraging common technologies such as PXE boot and IPMI to cover a wide range of hardware. Supporting pluggable drivers allows vendor-specific functionality to be added.
./community/community.services-ironic-overview.md:For information on Ironic, see OpenStack [Ironic's developer documentation](http://docs.openstack.org/developer/ironic/).
./community/community.services-overview.md:**Ironic**. The Ironic service runs during the installation for provisioning of the controller and KVM compute host in a baremetal deployment.
./community/community.services-overview.md:See [Overview of the Ironic Service](/helion/community/services/ironic/overview/).
